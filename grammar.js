    1: Внешние скрипты, порядок исполнения


    Если JavaScript кода много, то его выносят в отдельный файл, который подключается в html:
    // <script src="/absolute/path/to/script.js"></script>


    Если указан атрибут src, то содержимое тега игнорируется:
    /*
    <script src="file.js">
        alert(1); // так как указан src, то внутренняя часть тега игнорируется
    </script>
    */


    Асинхронные скрипты: defer/async
    Браузер загружает и отображает html постепенно, он не ждет пока страница загрузится целиком, он показывает ту часть, которую успел загрузить. 
    Если браузер видит тег script, то по стандарту он выполняет его, а потом показывает оставшуюся часть страницы. 
    В примере ниже тег p не будет показан, пока все кролики не будут подсчитаны:
    <body>
      <p>Начинаем считать:</p>
          <script>
            alert( 'Первый кролик!' );
            alert( 'Второй кролик!' );
            alert( 'Третий кролик!' );
          </script>
      <p>Кролики посчитаны!</p>
    </body>


    Такое поведение называют "синхронным". И если скрипт внешний, то оставшаяся часть страницы не будет показана до тех пор, пока браузер не выполнит его. В примере ниже содержимое тега body не будет показано, пока не выполнится файл big.js:
    <html>
        <head>
            <script src="big.js"></script>
        </head>
        <body>
            Этот текст не будет показан, пока браузер не выполнит big.js.
        </body>
    </html>


    Решить эту проблему помогают async и defer:

    async не поддерживается IE9-. Он загружается и выполняется независимо от страницы. При обнаружении скрипта с async браузер не останавливает обработку страницы и работает дальше. Скрипт будет выполнен когда загрузится, даже если страница все еще не подгружена.

    defer поддерживается всеми браузерами, есть два отличия от async:
    1. порядок скриптов с defer сохраняется (читается сверху вниз).
    2. скрипт с defer сработает когда весь html-документ будет обработан браузером.

    <script src="async.js" async> // этот файл выполнится сразу после загрузки, возможно даже до того, как загрузится весь html
    <script src="defer.js" defer> // этот подождет пока весь документ будет готов


    Атрибуты async/defer – только для внешних скриптов.

    При попытке назначить их на обычные скрипты <script>…</script> lol/, они будут проигнороированы.


    Теги script можно добавлять на страницу в любой момент при помощи js и вести они себя будут как и "async". Если нужно добавить несколько скриптов, которые будут выполняться строго один за другим, то используют свойство script.async = false:

    function addScript(src){
        var script = document.createElement('script');
         script.src = src;
        script.async = false; // чтобы гарантировать порядок
        document.head.appendChild(script);
    }

    addScript('1.js'); // загружаться эти скрипты начнут сразу
    addScript('2.js'); // выполнятся, как только загрузятся
    addScript('3.js'); // но, гарантированно, в порядке 1 -> 2 -> 3


    Допустим, small.js загружается быстрее чем big.js.

    <script src="big.js"></script>
    <script src="small.js"></script>
    Первым выполнится big.js, это нормальная последовательность выполнения подряд идущих скриптов.

    <script async src="big.js"></script>
    <script async src="small.js"></script>
    Первым выполнится small.js, так как скрипты из-за async ведут себя совершенно независимо друг от друга, страница тоже от них не зависит.

    <script defer src="big.js"></script>
    <script defer src="small.js"></script>
    Первым выполнится big.js, так как скрипты, подключённые через defer, сохраняют порядок выполнения относительно друг друга.




    2: "use strict";
    Эта директива ставится вначале скрипта. Она необходима для того, чтобы код соответствовал последним стандартам EcmaScript. По умолчанию она отключена, чтобы старый код не перестал функционировать.
    После включения этой директивы отключить ее невозможно.
    "use strict" можно указывать также в начале функций, тогда строгий режим будет распространятся только внутри функции.
    IE9- игнорируют "use strict". Многие возможности "use strict" можно добавить в IE9- подключив библиотеку es5-shim.js и es5-sham.js из нее. 
    Многие библиотеки написаны без учета "use strict". 




    3: Переменные
    Переменные используются для того, чтобы хранить информацию. Переменная состоит из имени и выделенной области памяти, которая ему соответствует. Для объявления (создания) переменной используется ключевое слово var:
    var message;

    Данные можно записать как после объявления, так и сразу, можно сразу объявить несколько переменных:
    var message;
    message = "hello"; 

    или 
    var message = "on hold";

    или
    var user = "John", age = 25, message = "hello";

    Обратиться к переменной можно по имени:
    alert(message);

    Значение переменной может быть изменено. Строе значение при этом удаляется:
    var message;
    message = "Hello!";
    message = "World!"; // заменили значение
    alert(message);

    Можно объявить две переменные и копировать данные из одной в другую:
    var hello = "Hello World!";
    var message;
    message = hello; // скопировали значение
    alert(hello); // Hello World!
    alert(message); // Hello World!

    Доллар '$' и знак подчеркивания '_' являются такими же обычными символами, как буквы. 

    В "use strict" нельзя создать новую переменную без директивы var. 

    Константа - это переменная, которая никогда не меняется. 



    4: Шесть типов данных, typeof
    В js есть 5 "примитивных" типов: number, string, boolean, null, undefined и object. Оператор typeof позволяет выяснить тип и возвращает его в виде строки. 
    В js не существует тип "символ", есть только строка. В js двойные и одинарные кавычки равносильны. 
    typeof undefined // "undefined"
    typeof 0 // "number"
    typeof true // "boolean"
    typeof "foo" // "string"
    typeof {} // "object"
    typeof null // "object"  (1)
    typeof function(){} // "function"  (2)

    